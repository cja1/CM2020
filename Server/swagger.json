{
  "openapi": "3.0.1",
  "info": {
    "title": "Sequence API",
    "description": "Welcome to the Sequence API documentation.<br/><br/>Developed for the UOL Computer Science Agile Software Development module by <b>Team 61</b> (T6G6).",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://yhw44o1elj.execute-api.eu-west-1.amazonaws.com/prod"
    }
  ],
  "tags": [
    {
      "name": "Games",
      "description": "The /games endpoint is the main endpoint used for creating a new game, joining an existing game, playing a round, getting the game state and deleting a game.<br/><br/>The expected order of events is:<ul><li>A player POSTs to the /games endpoint to create a new game. They receive a 4-digit game code. They pass this to the second player. The game status is \"waitingForPlayers\".</li><li>The second player POSTs to the /games/{code}/players endpoint to join the game. Now the game status is \"active\".</li><li>Turn-by-turn, each players POSTs to the /games/{code}/rounds endpoint with the card they want to play and the board position they want to play it. This continues until the game is won.</li><li>When the game is won the game status change to \"ended\"</li><li>At any time a player can get the game state by calling GET on /games/{code} endpoint. This returns the current game state.</li></ul>"
    },
    {
      "name": "Users",
      "description": "The /users endpoint is to allow the player to get and set their player name (gamer tag) and colour"
    },
    {
      "name": "Bots",
      "description": "The /bots endpoint is to allow the player to request a bot to play a round on the player's behalf."
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "description": "<br/><br/>We use Bearer authentication for requests to the Sequence API endpoints. The token is simply a UUID generated by the client. The UUID must remain the same between requests to uniquely identify the Player. In the code examples in the API documentation, replace {access-token} with a valid UUID.",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Player": {
        "type": "object",
        "description": "Player information",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the player. Currently this is set to a random player name when the player is created, format 'PlayerXXXXX' where 'X' is a 0-9 random digit.",
            "example": "Player12345"
          },
          "color": {
            "type": "string",
            "description": "The color for this player as a hex string. Currently this is set to a random color when the player is created, format 'XXXXXX' where 'X' is a 0-9a-f hex color.",
            "example": "ff0000"
          },
          "isMe": {
            "type": "boolean",
            "description": "Flag indicating if this player is the player making the request",
            "example": true
          }
        }
      },
      "BoardRow": {
        "type": "array",
        "description": "The state of one row on the board as a 10 element array of strings. The string is blank if no-one owns the cell, 'p1' if Player 1 owns it, or 'p2' if Player 2 owns it.",
        "example": [
          "",
          "",
          "",
          "p1",
          "p2",
          "",
          "p1",
          "",
          "",
          ""
        ],
        "items": {
          "type": "string"
        }
      },
      "BoardPosition": {
        "type": "array",
        "description": "An x, y cooridnate on the board",
        "example": [
          0,
          1
        ],
        "items": {
          "type": "int32"
        }
      },
      "WinningSequence": {
        "type": "object",
        "description": "A game winning sequence",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "row",
              "col",
              "diagDR",
              "diagDL"
            ],
            "description": "The type of winning sequence. One of 'row', 'col', 'diagDR' and 'diagDL' for row, column, diagonal down and to the right and diagonal down and to the left.",
            "example": "row"
          },
          "sequence": {
            "type": "array",
            "description": "The winning sequence as a length 5 array of points on the game board.",
            "items": {
              "$ref": "#/components/schemas/BoardPosition"
            }
          }
        }
      },
      "GameState": {
        "type": "object",
        "description": "Game state information. Always returns 'status' and 'players'. Other properties depend on game status - <ul><li><b>status = 'waitingForPlayers'</b> returns 'status', 'players'</li><li><b>status = 'active'</b> returns 'status', 'players', 'nextPlayer', 'boardState', 'cards'</li><li><b>status = 'ended'</b> returns 'status', 'players', 'winner', 'boardState'</li></ul>",
        "required": [
          "status",
          "players"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "waitingForPlayers",
              "active",
              "ended"
            ],
            "description": "The game status, one of waitingForPlayers, active or ended",
            "example": "active"
          },
          "players": {
            "type": "array",
            "description": "The names of the players in this game. The first player is always the player who created the game.",
            "items": {
              "$ref": "#/components/schemas/Player"
            }
          },
          "cards": {
            "type": "array",
            "description": "The cards in this player's hand as an array of strings. Card first part is the value, second part is the suit. Separated by a | as a delimiter.",
            "example": [
              "A|S",
              "10|H",
              "2|C"
            ],
            "items": {
              "type": "string"
            }
          },
          "nextPlayer": {
            "type": "int32",
            "description": "The number of the next player. 1 = Player 1, 2 = Player 2.",
            "example": 1
          },
          "boardState": {
            "type": "array",
            "description": "The current state of the game board - same for each player - sent as a 10 row array of BoardRow objects.",
            "items": {
              "$ref": "#/components/schemas/BoardRow"
            }
          },
          "winner": {
            "type": "int32",
            "description": "The number of the player who won. 1 = Player 1, 2 = Player 2. Note that 0 indicates that no player won - ie game was cancelled before a Player won the game.",
            "example": 2
          },
          "winningSequence": {
            "type": "object",
            "description": "The winning sequence object, containing the type of win and a length 5 array of winning points on the game board.",
            "$ref": "#/components/schemas/WinningSequence"
          },
          "handsPlayed": {
            "type": "int32",
            "description": "The number of hands played in this game",
            "example": 65
          },
          "duration": {
            "type": "int32",
            "description": "The duration of the game in seconds",
            "example": 610
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User information",
        "required": [
          "name",
          "color"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name",
            "example": "Bob"
          },
          "color": {
            "type": "string",
            "description": "The player's color",
            "example": "ff0000"
          }
        }
      },
      "GameOutcome": {
        "type": "object",
        "description": "The data set for the outcome of a game",
        "required": [
          "handsPlayed",
          "winner"
        ],
        "properties": {
          "handsPlayed": {
            "type": "int32",
            "description": "The number of hands played in this game. Maximum is 104 as a maximum of 52 x 2 cards played.",
            "example": 65
          },
          "winner": {
            "type": "int32",
            "enum": [
              0,
              1,
              2
            ],
            "description": "The winner of the game. Either 0 represening no winner (a draw), 1 representing Player 1 or 2 represening Player 2",
            "example": 1
          },
          "winningSequence": {
            "type": "object",
            "description": "The winning sequence object, containing the type of win and a length 5 array of winning points on the game board.",
            "$ref": "#/components/schemas/WinningSequence"
          },
          "duration": {
            "type": "int32",
            "description": "The duration of the game in seconds",
            "example": 610
          }
        }
      }
    }
  },
  "paths": {
    "/games": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Create a new game. This request returns the newly created game code like 'XY89'. This code is passed to the other player allowing them to join the game by POSTing to the /games/{code}/players endpoint.",
        "operationId": "Create a game",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isPlayer2Bot": {
                    "type": "boolean",
                    "description": "A flag indicating the game should be created with player 2 as a bot - ie play against the computer.",
                    "example": false
                  }
                }
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "4 character alphanumeric game code - used to uniquely identify this game",
                      "example": "AB12"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid Authorisation Bearer token"
          }
        }
      },
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get a list of ended games. This request returns data about the last 100 completed games. For each game the return data is the number of hands played, the winner and the winning sequence. This endpoint is primarily used for statistics and development to ensure that all different possible winning sequences are tested and result in a win being declared.",
        "operationId": "Get a list of games",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of GameOutcome objects",
                  "items": {
                    "$ref": "#/components/schemas/GameOutcome"
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid Authorisation Bearer token"
          }
        }
      }
    },
    "/games/{code}/players": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Join a game. The second player joins a game by POSTing to the /games/{code}/players endpoint, where {code} is the 4 digit game code received by the player who created the game.",
        "operationId": "Join a game",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique 4 character code for this game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "game not found"
          },
          "409": {
            "description": "conflict - another player has aready accepted to join this game"
          },
          "422": {
            "description": "unprocessable - this player has already joined this game (ie this player created the game)"
          }
        }
      }
    },
    "/games/{code}/rounds": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Play a round in a game. Players pass in the card they want to play from their hand together with the position on the board they want to play the card. If this is a valid move then the board state is updated and play moves to the other player. The business logic in this function makes various checks including <ul><li>Is it this player's turn?</li><li>Does the player have this card in their hand?</li><li>Is the move valid?</li></ul>",
        "operationId": "Play a round",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "card",
                  "moveRow",
                  "moveCol"
                ],
                "properties": {
                  "card": {
                    "type": "string",
                    "description": "The card this player wants to play",
                    "example": "A|C"
                  },
                  "moveRow": {
                    "type": "int32",
                    "description": "The row number where the player wants to play this card, from 0 to 9",
                    "example": 3
                  },
                  "moveCol": {
                    "type": "int32",
                    "description": "The column number where the player wants to play this card, from 0 to 9",
                    "example": 7
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique 4 character code for this game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameState"
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "game not found"
          },
          "422": {
            "description": "unprocessable"
          }
        }
      }
    },
    "/games/{code}": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get the state of this game. Always returns 'status' and 'players'. Other properties depend on game status - <ul><li><b>status = 'waitingForPlayers'</b> returns 'status', 'players'</li><li><b>status = 'active'</b> returns 'status', 'players', 'nextPlayer', 'boardState', 'cards'</li><li><b>status = 'ended'</b> returns 'status', 'players', 'winner', 'boardState'</li></ul>",
        "operationId": "Get game state",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique 4 character code for this game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameState"
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "game not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Delete a new game. This request sets the game 'status' to 'ended' and the 'winner' to 0 to indicate no winner. Note that DELETE is idempotent - as long as the game code is valid for this player then the operation succeeds even if the game state is already set to ended. Note also that a game that has been won (and ended) will keep the existing 'winner' value, so calling DELETE doesn't remove the winner.",
        "operationId": "Delete a game",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The unique 4 character code for this game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorised - invalid Authorisation Bearer token"
          },
          "404": {
            "description": "game not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the user name and color.",
        "operationId": "Get user details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "user not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Set the user name and / or colour.",
        "operationId": "Update user details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name for this player",
                    "example": "Bob"
                  },
                  "color": {
                    "type": "string",
                    "description": "The new colour for this player - as a hex string",
                    "example": "ff0000"
                  }
                }
              }
            }
          },
          "required": false
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "user not found"
          },
          "422": {
            "description": "unprocessable"
          }
        }
      }
    },
    "/bots": {
      "post": {
        "tags": [
          "Bots"
        ],
        "summary": "Bot play a round in a game. Request the bot to play a round. Players pass in the game code. The bot gets the players cards and plays a round in the game.",
        "operationId": "Bot play a round",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The unique 4 character code for this game",
                    "example": "12AB"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "unauthorised - invalid API token"
          },
          "404": {
            "description": "game not found"
          },
          "422": {
            "description": "unprocessable"
          }
        }
      }
    }
  }
}